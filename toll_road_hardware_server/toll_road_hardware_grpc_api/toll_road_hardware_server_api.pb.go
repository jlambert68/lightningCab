// Code generated by protoc-gen-go. DO NOT EDIT.
// source: toll_road_hardware_server_api.proto

/*
Package toll_road_hardware_grpc_api is a generated protocol buffer package.

It is generated from these files:
	toll_road_hardware_server_api.proto

It has these top-level messages:
	EmptyParameter
	AckNackResponse
	Enviroment
	TollGateServoMessage
	DistanceSensorMessage
	EInkDisplayMessage
*/
package toll_road_hardware_grpc_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestOrProdEnviroment int32

const (
	TestOrProdEnviroment_Test       TestOrProdEnviroment = 0
	TestOrProdEnviroment_Production TestOrProdEnviroment = 1
)

var TestOrProdEnviroment_name = map[int32]string{
	0: "Test",
	1: "Production",
}
var TestOrProdEnviroment_value = map[string]int32{
	"Test":       0,
	"Production": 1,
}

func (x TestOrProdEnviroment) String() string {
	return proto.EnumName(TestOrProdEnviroment_name, int32(x))
}
func (TestOrProdEnviroment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TollGateCommand int32

const (
	TollGateCommand_OPEN  TollGateCommand = 0
	TollGateCommand_CLOSE TollGateCommand = 1
)

var TollGateCommand_name = map[int32]string{
	0: "OPEN",
	1: "CLOSE",
}
var TollGateCommand_value = map[string]int32{
	"OPEN":  0,
	"CLOSE": 1,
}

func (x TollGateCommand) String() string {
	return proto.EnumName(TollGateCommand_name, int32(x))
}
func (TollGateCommand) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DistanceSensorCommand int32

const (
	DistanceSensorCommand_OBJECT_FOUND              DistanceSensorCommand = 0
	DistanceSensorCommand_OBJECT_NOT_FOUND          DistanceSensorCommand = 1
	DistanceSensorCommand_SIGNAL_WHEN_OBJECT_ENTERS DistanceSensorCommand = 2
	DistanceSensorCommand_SIGNAL_WHEN_OBJECT_LEAVES DistanceSensorCommand = 3
)

var DistanceSensorCommand_name = map[int32]string{
	0: "OBJECT_FOUND",
	1: "OBJECT_NOT_FOUND",
	2: "SIGNAL_WHEN_OBJECT_ENTERS",
	3: "SIGNAL_WHEN_OBJECT_LEAVES",
}
var DistanceSensorCommand_value = map[string]int32{
	"OBJECT_FOUND":              0,
	"OBJECT_NOT_FOUND":          1,
	"SIGNAL_WHEN_OBJECT_ENTERS": 2,
	"SIGNAL_WHEN_OBJECT_LEAVES": 3,
}

func (x DistanceSensorCommand) String() string {
	return proto.EnumName(DistanceSensorCommand_name, int32(x))
}
func (DistanceSensorCommand) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EInkMessageType int32

const (
	EInkMessageType_MESSAGE_TEXT    EInkMessageType = 0
	EInkMessageType_MESSSAGE_QR     EInkMessageType = 1
	EInkMessageType_MESSAGE_PICTURE EInkMessageType = 2
)

var EInkMessageType_name = map[int32]string{
	0: "MESSAGE_TEXT",
	1: "MESSSAGE_QR",
	2: "MESSAGE_PICTURE",
}
var EInkMessageType_value = map[string]int32{
	"MESSAGE_TEXT":    0,
	"MESSSAGE_QR":     1,
	"MESSAGE_PICTURE": 2,
}

func (x EInkMessageType) String() string {
	return proto.EnumName(EInkMessageType_name, int32(x))
}
func (EInkMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Parameter used for Empty inputs
type EmptyParameter struct {
}

func (m *EmptyParameter) Reset()                    { *m = EmptyParameter{} }
func (m *EmptyParameter) String() string            { return proto.CompactTextString(m) }
func (*EmptyParameter) ProtoMessage()               {}
func (*EmptyParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	Acknack  bool   `protobuf:"varint,1,opt,name=acknack" json:"acknack,omitempty"`
	Comments string `protobuf:"bytes,2,opt,name=comments" json:"comments,omitempty"`
}

func (m *AckNackResponse) Reset()                    { *m = AckNackResponse{} }
func (m *AckNackResponse) String() string            { return proto.CompactTextString(m) }
func (*AckNackResponse) ProtoMessage()               {}
func (*AckNackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AckNackResponse) GetAcknack() bool {
	if m != nil {
		return m.Acknack
	}
	return false
}

func (m *AckNackResponse) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

type Enviroment struct {
	TestOrProduction TestOrProdEnviroment `protobuf:"varint,1,opt,name=TestOrProduction,enum=toll_road_hardware_grpc_api.TestOrProdEnviroment" json:"TestOrProduction,omitempty"`
}

func (m *Enviroment) Reset()                    { *m = Enviroment{} }
func (m *Enviroment) String() string            { return proto.CompactTextString(m) }
func (*Enviroment) ProtoMessage()               {}
func (*Enviroment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Enviroment) GetTestOrProduction() TestOrProdEnviroment {
	if m != nil {
		return m.TestOrProduction
	}
	return TestOrProdEnviroment_Test
}

type TollGateServoMessage struct {
	TollGateServoEnviroment TestOrProdEnviroment `protobuf:"varint,1,opt,name=tollGateServoEnviroment,enum=toll_road_hardware_grpc_api.TestOrProdEnviroment" json:"tollGateServoEnviroment,omitempty"`
	TollGateCommand         TollGateCommand      `protobuf:"varint,2,opt,name=tollGateCommand,enum=toll_road_hardware_grpc_api.TollGateCommand" json:"tollGateCommand,omitempty"`
}

func (m *TollGateServoMessage) Reset()                    { *m = TollGateServoMessage{} }
func (m *TollGateServoMessage) String() string            { return proto.CompactTextString(m) }
func (*TollGateServoMessage) ProtoMessage()               {}
func (*TollGateServoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TollGateServoMessage) GetTollGateServoEnviroment() TestOrProdEnviroment {
	if m != nil {
		return m.TollGateServoEnviroment
	}
	return TestOrProdEnviroment_Test
}

func (m *TollGateServoMessage) GetTollGateCommand() TollGateCommand {
	if m != nil {
		return m.TollGateCommand
	}
	return TollGateCommand_OPEN
}

type DistanceSensorMessage struct {
	DistanceSensorEnviroment TestOrProdEnviroment  `protobuf:"varint,1,opt,name=distanceSensorEnviroment,enum=toll_road_hardware_grpc_api.TestOrProdEnviroment" json:"distanceSensorEnviroment,omitempty"`
	DistanceSensorCommand    DistanceSensorCommand `protobuf:"varint,2,opt,name=distanceSensorCommand,enum=toll_road_hardware_grpc_api.DistanceSensorCommand" json:"distanceSensorCommand,omitempty"`
}

func (m *DistanceSensorMessage) Reset()                    { *m = DistanceSensorMessage{} }
func (m *DistanceSensorMessage) String() string            { return proto.CompactTextString(m) }
func (*DistanceSensorMessage) ProtoMessage()               {}
func (*DistanceSensorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DistanceSensorMessage) GetDistanceSensorEnviroment() TestOrProdEnviroment {
	if m != nil {
		return m.DistanceSensorEnviroment
	}
	return TestOrProdEnviroment_Test
}

func (m *DistanceSensorMessage) GetDistanceSensorCommand() DistanceSensorCommand {
	if m != nil {
		return m.DistanceSensorCommand
	}
	return DistanceSensorCommand_OBJECT_FOUND
}

type EInkDisplayMessage struct {
	EInkDisplayEnviroment TestOrProdEnviroment `protobuf:"varint,1,opt,name=eInkDisplayEnviroment,enum=toll_road_hardware_grpc_api.TestOrProdEnviroment" json:"eInkDisplayEnviroment,omitempty"`
	MessageType           EInkMessageType      `protobuf:"varint,2,opt,name=messageType,enum=toll_road_hardware_grpc_api.EInkMessageType" json:"messageType,omitempty"`
	Message               string               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Picture               string               `protobuf:"bytes,4,opt,name=picture" json:"picture,omitempty"`
}

func (m *EInkDisplayMessage) Reset()                    { *m = EInkDisplayMessage{} }
func (m *EInkDisplayMessage) String() string            { return proto.CompactTextString(m) }
func (*EInkDisplayMessage) ProtoMessage()               {}
func (*EInkDisplayMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EInkDisplayMessage) GetEInkDisplayEnviroment() TestOrProdEnviroment {
	if m != nil {
		return m.EInkDisplayEnviroment
	}
	return TestOrProdEnviroment_Test
}

func (m *EInkDisplayMessage) GetMessageType() EInkMessageType {
	if m != nil {
		return m.MessageType
	}
	return EInkMessageType_MESSAGE_TEXT
}

func (m *EInkDisplayMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EInkDisplayMessage) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyParameter)(nil), "toll_road_hardware_grpc_api.EmptyParameter")
	proto.RegisterType((*AckNackResponse)(nil), "toll_road_hardware_grpc_api.AckNackResponse")
	proto.RegisterType((*Enviroment)(nil), "toll_road_hardware_grpc_api.Enviroment")
	proto.RegisterType((*TollGateServoMessage)(nil), "toll_road_hardware_grpc_api.TollGateServoMessage")
	proto.RegisterType((*DistanceSensorMessage)(nil), "toll_road_hardware_grpc_api.DistanceSensorMessage")
	proto.RegisterType((*EInkDisplayMessage)(nil), "toll_road_hardware_grpc_api.EInkDisplayMessage")
	proto.RegisterEnum("toll_road_hardware_grpc_api.TestOrProdEnviroment", TestOrProdEnviroment_name, TestOrProdEnviroment_value)
	proto.RegisterEnum("toll_road_hardware_grpc_api.TollGateCommand", TollGateCommand_name, TollGateCommand_value)
	proto.RegisterEnum("toll_road_hardware_grpc_api.DistanceSensorCommand", DistanceSensorCommand_name, DistanceSensorCommand_value)
	proto.RegisterEnum("toll_road_hardware_grpc_api.EInkMessageType", EInkMessageType_name, EInkMessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TollHardware service

type TollHardwareClient interface {
	// Check that the gate servo is working
	CheckTollGateServo(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Check that Distance sensor is working
	CheckTollDistanceSensor(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Check that E-ink display is working
	CheckTollEInkDisplay(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Open or Close the the Toll Gate
	OpenCloseTollGateServo(ctx context.Context, in *TollGateServoMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Use the Distance Sensor
	UseDistanceSensor(ctx context.Context, in *DistanceSensorMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Send Message to E-Ink display
	UseEInkDisplay(ctx context.Context, in *EInkDisplayMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type tollHardwareClient struct {
	cc *grpc.ClientConn
}

func NewTollHardwareClient(cc *grpc.ClientConn) TollHardwareClient {
	return &tollHardwareClient{cc}
}

func (c *tollHardwareClient) CheckTollGateServo(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := grpc.Invoke(ctx, "/toll_road_hardware_grpc_api.TollHardware/CheckTollGateServo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollHardwareClient) CheckTollDistanceSensor(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := grpc.Invoke(ctx, "/toll_road_hardware_grpc_api.TollHardware/CheckTollDistanceSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollHardwareClient) CheckTollEInkDisplay(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := grpc.Invoke(ctx, "/toll_road_hardware_grpc_api.TollHardware/CheckTollEInkDisplay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollHardwareClient) OpenCloseTollGateServo(ctx context.Context, in *TollGateServoMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := grpc.Invoke(ctx, "/toll_road_hardware_grpc_api.TollHardware/OpenCloseTollGateServo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollHardwareClient) UseDistanceSensor(ctx context.Context, in *DistanceSensorMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := grpc.Invoke(ctx, "/toll_road_hardware_grpc_api.TollHardware/UseDistanceSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollHardwareClient) UseEInkDisplay(ctx context.Context, in *EInkDisplayMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := grpc.Invoke(ctx, "/toll_road_hardware_grpc_api.TollHardware/UseEInkDisplay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TollHardware service

type TollHardwareServer interface {
	// Check that the gate servo is working
	CheckTollGateServo(context.Context, *Enviroment) (*AckNackResponse, error)
	// Check that Distance sensor is working
	CheckTollDistanceSensor(context.Context, *Enviroment) (*AckNackResponse, error)
	// Check that E-ink display is working
	CheckTollEInkDisplay(context.Context, *Enviroment) (*AckNackResponse, error)
	// Open or Close the the Toll Gate
	OpenCloseTollGateServo(context.Context, *TollGateServoMessage) (*AckNackResponse, error)
	// Use the Distance Sensor
	UseDistanceSensor(context.Context, *DistanceSensorMessage) (*AckNackResponse, error)
	// Send Message to E-Ink display
	UseEInkDisplay(context.Context, *EInkDisplayMessage) (*AckNackResponse, error)
}

func RegisterTollHardwareServer(s *grpc.Server, srv TollHardwareServer) {
	s.RegisterService(&_TollHardware_serviceDesc, srv)
}

func _TollHardware_CheckTollGateServo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enviroment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollHardwareServer).CheckTollGateServo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toll_road_hardware_grpc_api.TollHardware/CheckTollGateServo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollHardwareServer).CheckTollGateServo(ctx, req.(*Enviroment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollHardware_CheckTollDistanceSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enviroment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollHardwareServer).CheckTollDistanceSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toll_road_hardware_grpc_api.TollHardware/CheckTollDistanceSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollHardwareServer).CheckTollDistanceSensor(ctx, req.(*Enviroment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollHardware_CheckTollEInkDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enviroment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollHardwareServer).CheckTollEInkDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toll_road_hardware_grpc_api.TollHardware/CheckTollEInkDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollHardwareServer).CheckTollEInkDisplay(ctx, req.(*Enviroment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollHardware_OpenCloseTollGateServo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TollGateServoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollHardwareServer).OpenCloseTollGateServo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toll_road_hardware_grpc_api.TollHardware/OpenCloseTollGateServo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollHardwareServer).OpenCloseTollGateServo(ctx, req.(*TollGateServoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollHardware_UseDistanceSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistanceSensorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollHardwareServer).UseDistanceSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toll_road_hardware_grpc_api.TollHardware/UseDistanceSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollHardwareServer).UseDistanceSensor(ctx, req.(*DistanceSensorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollHardware_UseEInkDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EInkDisplayMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollHardwareServer).UseEInkDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toll_road_hardware_grpc_api.TollHardware/UseEInkDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollHardwareServer).UseEInkDisplay(ctx, req.(*EInkDisplayMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TollHardware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "toll_road_hardware_grpc_api.TollHardware",
	HandlerType: (*TollHardwareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTollGateServo",
			Handler:    _TollHardware_CheckTollGateServo_Handler,
		},
		{
			MethodName: "CheckTollDistanceSensor",
			Handler:    _TollHardware_CheckTollDistanceSensor_Handler,
		},
		{
			MethodName: "CheckTollEInkDisplay",
			Handler:    _TollHardware_CheckTollEInkDisplay_Handler,
		},
		{
			MethodName: "OpenCloseTollGateServo",
			Handler:    _TollHardware_OpenCloseTollGateServo_Handler,
		},
		{
			MethodName: "UseDistanceSensor",
			Handler:    _TollHardware_UseDistanceSensor_Handler,
		},
		{
			MethodName: "UseEInkDisplay",
			Handler:    _TollHardware_UseEInkDisplay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toll_road_hardware_server_api.proto",
}

func init() { proto.RegisterFile("toll_road_hardware_server_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x6f, 0x4f, 0xd3, 0x5e,
	0x14, 0x5e, 0x07, 0xfc, 0x7e, 0x70, 0x20, 0xdb, 0xf5, 0x3a, 0x64, 0x62, 0x4c, 0x48, 0x4d, 0x94,
	0x2c, 0x06, 0x65, 0x7e, 0x82, 0xb9, 0x5d, 0xc7, 0x0c, 0xb4, 0xb3, 0xed, 0xd0, 0x37, 0xa6, 0xb9,
	0x76, 0x37, 0xd0, 0xf4, 0xcf, 0xad, 0xf7, 0x16, 0x08, 0x31, 0xbe, 0xf0, 0xf3, 0xf9, 0x11, 0xfc,
	0x12, 0x7e, 0x04, 0xd3, 0xb1, 0xae, 0x6b, 0x1d, 0x93, 0x11, 0x78, 0x79, 0xfe, 0x3d, 0xcf, 0x3d,
	0xcf, 0xe9, 0x39, 0x85, 0x67, 0x31, 0xf7, 0x7d, 0x5b, 0x70, 0x3a, 0xb4, 0x4f, 0xa9, 0x18, 0x5e,
	0x50, 0xc1, 0x6c, 0xc9, 0xc4, 0x39, 0x13, 0x36, 0x8d, 0xdc, 0xbd, 0x48, 0xf0, 0x98, 0xe3, 0x27,
	0x33, 0x92, 0x4e, 0x44, 0xe4, 0x24, 0x29, 0x2a, 0x82, 0x0a, 0x09, 0xa2, 0xf8, 0xb2, 0x4f, 0x05,
	0x0d, 0x58, 0xcc, 0x84, 0xda, 0x85, 0x6a, 0xcb, 0xf1, 0x34, 0xea, 0x78, 0x06, 0x93, 0x11, 0x0f,
	0x25, 0xc3, 0x75, 0xf8, 0x9f, 0x3a, 0x5e, 0x48, 0x1d, 0xaf, 0xae, 0xec, 0x28, 0xbb, 0xab, 0x46,
	0x6a, 0xe2, 0x6d, 0x58, 0x75, 0x78, 0x10, 0xb0, 0x30, 0x96, 0xf5, 0xf2, 0x8e, 0xb2, 0xbb, 0x66,
	0x4c, 0x6c, 0xd5, 0x03, 0x20, 0xe1, 0xb9, 0x2b, 0x78, 0x62, 0xe2, 0xcf, 0x80, 0x2c, 0x26, 0x63,
	0x5d, 0xf4, 0x05, 0x1f, 0x9e, 0x39, 0xb1, 0xcb, 0xc3, 0x11, 0x58, 0xa5, 0xb9, 0xbf, 0x37, 0xe7,
	0x81, 0x7b, 0x59, 0x51, 0x06, 0x66, 0xfc, 0x05, 0xa5, 0xfe, 0x52, 0xa0, 0x66, 0x71, 0xdf, 0xef,
	0xd2, 0x98, 0x99, 0x4c, 0x9c, 0xf3, 0x23, 0x26, 0x25, 0x3d, 0x61, 0xd8, 0x83, 0xad, 0x78, 0xda,
	0x9f, 0xa1, 0xdc, 0x9e, 0xfe, 0x3a, 0x44, 0x7c, 0x0c, 0xd5, 0x34, 0xd4, 0xe6, 0x41, 0x40, 0xc3,
	0xe1, 0x48, 0x95, 0x4a, 0xf3, 0xe5, 0x7c, 0x92, 0x7c, 0x8d, 0x51, 0x04, 0x51, 0x7f, 0x2b, 0xb0,
	0xd9, 0x71, 0x65, 0x4c, 0x43, 0x87, 0x99, 0x2c, 0x94, 0x5c, 0xa4, 0xed, 0x05, 0x50, 0x1f, 0xe6,
	0x02, 0x77, 0xd1, 0xdf, 0xb5, 0x90, 0xf8, 0x14, 0x36, 0xf3, 0xb1, 0x7c, 0x9b, 0xcd, 0xb9, 0x5c,
	0x9d, 0x59, 0x95, 0xc6, 0x6c, 0x40, 0xf5, 0x47, 0x19, 0x30, 0xe9, 0x85, 0x5e, 0xc7, 0x95, 0x91,
	0x4f, 0x2f, 0xd3, 0x7e, 0x4f, 0x60, 0x93, 0x65, 0xde, 0xbb, 0x68, 0x76, 0x36, 0x1e, 0xd6, 0x60,
	0x3d, 0xb8, 0xe2, 0xb4, 0x2e, 0x23, 0x76, 0xa3, 0x31, 0x26, 0xcf, 0x3d, 0xca, 0x6a, 0x8c, 0x69,
	0x80, 0x64, 0x87, 0xc6, 0x66, 0x7d, 0x69, 0xb4, 0x28, 0xa9, 0x99, 0x44, 0x22, 0xd7, 0x89, 0xcf,
	0x04, 0xab, 0x2f, 0x5f, 0x45, 0xc6, 0x66, 0xe3, 0x35, 0xd4, 0x66, 0x3d, 0x19, 0xaf, 0xc2, 0x72,
	0xe2, 0x47, 0x25, 0x5c, 0x01, 0xc8, 0x96, 0x00, 0x29, 0x8d, 0xe7, 0x50, 0x2d, 0x7c, 0x4c, 0x49,
	0xb2, 0xde, 0x27, 0x1a, 0x2a, 0xe1, 0x35, 0x58, 0x69, 0x1f, 0xea, 0x26, 0x41, 0x4a, 0xe3, 0x7b,
	0xf1, 0x7b, 0x4a, 0xb3, 0x11, 0x6c, 0xe8, 0x6f, 0xdf, 0x93, 0xb6, 0x65, 0xbf, 0xd3, 0x07, 0x5a,
	0x07, 0x95, 0x70, 0x0d, 0xd0, 0xd8, 0xa3, 0xe9, 0xa9, 0x57, 0xc1, 0x4f, 0xe1, 0xb1, 0xd9, 0xeb,
	0x6a, 0xad, 0x43, 0xfb, 0xe3, 0x01, 0xd1, 0xec, 0x71, 0x06, 0xd1, 0x2c, 0x62, 0x98, 0xa8, 0x7c,
	0x4d, 0xf8, 0x90, 0xb4, 0x8e, 0x89, 0x89, 0x96, 0x1a, 0x3d, 0xa8, 0x16, 0xc4, 0x4a, 0x88, 0x8f,
	0x88, 0x69, 0xb6, 0xba, 0xc4, 0xb6, 0xc8, 0x27, 0x0b, 0x95, 0x70, 0x15, 0xd6, 0x13, 0xcf, 0xc8,
	0xf5, 0xc1, 0x40, 0x0a, 0x7e, 0x08, 0xd5, 0x34, 0xa5, 0xdf, 0x6b, 0x5b, 0x03, 0x83, 0xa0, 0x72,
	0xf3, 0xe7, 0x0a, 0x6c, 0x24, 0x2d, 0x1f, 0x8c, 0xc7, 0x81, 0x03, 0xc0, 0xed, 0x53, 0xe6, 0x78,
	0xb9, 0x6b, 0x80, 0x5f, 0xcc, 0x9f, 0xdc, 0x44, 0xdb, 0xed, 0xf9, 0x23, 0x2e, 0x5c, 0x46, 0xb5,
	0x84, 0x05, 0x6c, 0x4d, 0xe8, 0xf2, 0x92, 0xde, 0x1f, 0x27, 0x87, 0xda, 0x84, 0x73, 0x6a, 0x47,
	0xee, 0x8f, 0xf0, 0x1b, 0x3c, 0xd2, 0x23, 0x16, 0xb6, 0x7d, 0x2e, 0x59, 0x5e, 0xd7, 0xfd, 0x1b,
	0x1d, 0xb6, 0xe9, 0x8b, 0xbc, 0x30, 0xf9, 0x05, 0x3c, 0x18, 0x48, 0x56, 0xd0, 0x76, 0x91, 0x4b,
	0x73, 0x5b, 0xe2, 0xaf, 0x50, 0x19, 0x48, 0x36, 0x2d, 0xf0, 0xab, 0x7f, 0xee, 0x7f, 0xfe, 0x5c,
	0x2d, 0x4a, 0xf9, 0xe5, 0xbf, 0xd1, 0x2f, 0xfb, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82,
	0x9e, 0x01, 0x61, 0xd9, 0x07, 0x00, 0x00,
}
