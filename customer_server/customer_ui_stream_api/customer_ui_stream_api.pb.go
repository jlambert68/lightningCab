// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer_ui_stream_api.proto

package customer_ui_stream_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyParameter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyParameter) Reset()         { *m = EmptyParameter{} }
func (m *EmptyParameter) String() string { return proto.CompactTextString(m) }
func (*EmptyParameter) ProtoMessage()    {}
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ui_stream_api_f12ce693d1f7da7a, []int{0}
}
func (m *EmptyParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyParameter.Unmarshal(m, b)
}
func (m *EmptyParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyParameter.Marshal(b, m, deterministic)
}
func (dst *EmptyParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyParameter.Merge(dst, src)
}
func (m *EmptyParameter) XXX_Size() int {
	return xxx_messageInfo_EmptyParameter.Size(m)
}
func (m *EmptyParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyParameter.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyParameter proto.InternalMessageInfo

type RPCMethods struct {
	AskTaxiForPrice      bool     `protobuf:"varint,1,opt,name=AskTaxiForPrice,proto3" json:"AskTaxiForPrice,omitempty"`
	AcceptPrice          bool     `protobuf:"varint,2,opt,name=AcceptPrice,proto3" json:"AcceptPrice,omitempty"`
	HaltPaymentsTrue     bool     `protobuf:"varint,3,opt,name=HaltPayments_true,json=HaltPaymentsTrue,proto3" json:"HaltPayments_true,omitempty"`
	HaltPaymentsFalse    bool     `protobuf:"varint,4,opt,name=HaltPayments_false,json=HaltPaymentsFalse,proto3" json:"HaltPayments_false,omitempty"`
	LeaveTaxi            bool     `protobuf:"varint,5,opt,name=LeaveTaxi,proto3" json:"LeaveTaxi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCMethods) Reset()         { *m = RPCMethods{} }
func (m *RPCMethods) String() string { return proto.CompactTextString(m) }
func (*RPCMethods) ProtoMessage()    {}
func (*RPCMethods) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ui_stream_api_f12ce693d1f7da7a, []int{1}
}
func (m *RPCMethods) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCMethods.Unmarshal(m, b)
}
func (m *RPCMethods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCMethods.Marshal(b, m, deterministic)
}
func (dst *RPCMethods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCMethods.Merge(dst, src)
}
func (m *RPCMethods) XXX_Size() int {
	return xxx_messageInfo_RPCMethods.Size(m)
}
func (m *RPCMethods) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCMethods.DiscardUnknown(m)
}

var xxx_messageInfo_RPCMethods proto.InternalMessageInfo

func (m *RPCMethods) GetAskTaxiForPrice() bool {
	if m != nil {
		return m.AskTaxiForPrice
	}
	return false
}

func (m *RPCMethods) GetAcceptPrice() bool {
	if m != nil {
		return m.AcceptPrice
	}
	return false
}

func (m *RPCMethods) GetHaltPaymentsTrue() bool {
	if m != nil {
		return m.HaltPaymentsTrue
	}
	return false
}

func (m *RPCMethods) GetHaltPaymentsFalse() bool {
	if m != nil {
		return m.HaltPaymentsFalse
	}
	return false
}

func (m *RPCMethods) GetLeaveTaxi() bool {
	if m != nil {
		return m.LeaveTaxi
	}
	return false
}

type UIPriceAndStateRespons struct {
	Acknack                   bool        `protobuf:"varint,1,opt,name=acknack,proto3" json:"acknack,omitempty"`
	Comments                  string      `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"`
	SpeedAmountSatoshi        int64       `protobuf:"varint,3,opt,name=speed_amount_satoshi,json=speedAmountSatoshi,proto3" json:"speed_amount_satoshi,omitempty"`
	AccelerationAmountSatoshi int64       `protobuf:"varint,4,opt,name=acceleration_amount_satoshi,json=accelerationAmountSatoshi,proto3" json:"acceleration_amount_satoshi,omitempty"`
	TimeAmountSatoshi         int64       `protobuf:"varint,5,opt,name=time_amount_satoshi,json=timeAmountSatoshi,proto3" json:"time_amount_satoshi,omitempty"`
	SpeedAmountSek            float32     `protobuf:"fixed32,6,opt,name=speed_amount_sek,json=speedAmountSek,proto3" json:"speed_amount_sek,omitempty"`
	AccelerationAmountSek     float32     `protobuf:"fixed32,7,opt,name=acceleration_amount_sek,json=accelerationAmountSek,proto3" json:"acceleration_amount_sek,omitempty"`
	TimeAmountSek             float32     `protobuf:"fixed32,8,opt,name=time_amount_sek,json=timeAmountSek,proto3" json:"time_amount_sek,omitempty"`
	TotalAmountSatoshi        int64       `protobuf:"varint,9,opt,name=total_amount_satoshi,json=totalAmountSatoshi,proto3" json:"total_amount_satoshi,omitempty"`
	TotalAmountSek            float32     `protobuf:"fixed32,10,opt,name=total_amount_sek,json=totalAmountSek,proto3" json:"total_amount_sek,omitempty"`
	Timestamp                 int64       `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AllowedRPCMethods         *RPCMethods `protobuf:"bytes,12,opt,name=allowedRPCMethods,proto3" json:"allowedRPCMethods,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}    `json:"-"`
	XXX_unrecognized          []byte      `json:"-"`
	XXX_sizecache             int32       `json:"-"`
}

func (m *UIPriceAndStateRespons) Reset()         { *m = UIPriceAndStateRespons{} }
func (m *UIPriceAndStateRespons) String() string { return proto.CompactTextString(m) }
func (*UIPriceAndStateRespons) ProtoMessage()    {}
func (*UIPriceAndStateRespons) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ui_stream_api_f12ce693d1f7da7a, []int{2}
}
func (m *UIPriceAndStateRespons) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UIPriceAndStateRespons.Unmarshal(m, b)
}
func (m *UIPriceAndStateRespons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UIPriceAndStateRespons.Marshal(b, m, deterministic)
}
func (dst *UIPriceAndStateRespons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UIPriceAndStateRespons.Merge(dst, src)
}
func (m *UIPriceAndStateRespons) XXX_Size() int {
	return xxx_messageInfo_UIPriceAndStateRespons.Size(m)
}
func (m *UIPriceAndStateRespons) XXX_DiscardUnknown() {
	xxx_messageInfo_UIPriceAndStateRespons.DiscardUnknown(m)
}

var xxx_messageInfo_UIPriceAndStateRespons proto.InternalMessageInfo

func (m *UIPriceAndStateRespons) GetAcknack() bool {
	if m != nil {
		return m.Acknack
	}
	return false
}

func (m *UIPriceAndStateRespons) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *UIPriceAndStateRespons) GetSpeedAmountSatoshi() int64 {
	if m != nil {
		return m.SpeedAmountSatoshi
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetAccelerationAmountSatoshi() int64 {
	if m != nil {
		return m.AccelerationAmountSatoshi
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetTimeAmountSatoshi() int64 {
	if m != nil {
		return m.TimeAmountSatoshi
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetSpeedAmountSek() float32 {
	if m != nil {
		return m.SpeedAmountSek
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetAccelerationAmountSek() float32 {
	if m != nil {
		return m.AccelerationAmountSek
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetTimeAmountSek() float32 {
	if m != nil {
		return m.TimeAmountSek
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetTotalAmountSatoshi() int64 {
	if m != nil {
		return m.TotalAmountSatoshi
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetTotalAmountSek() float32 {
	if m != nil {
		return m.TotalAmountSek
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UIPriceAndStateRespons) GetAllowedRPCMethods() *RPCMethods {
	if m != nil {
		return m.AllowedRPCMethods
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyParameter)(nil), "customer_ui_stream_api.EmptyParameter")
	proto.RegisterType((*RPCMethods)(nil), "customer_ui_stream_api.RPCMethods")
	proto.RegisterType((*UIPriceAndStateRespons)(nil), "customer_ui_stream_api.UIPriceAndStateRespons")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerUIPriceStreamClient is the client API for CustomerUIPriceStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerUIPriceStreamClient interface {
	// Returns a stream with
	UIPriceAndStateStream(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (CustomerUIPriceStream_UIPriceAndStateStreamClient, error)
}

type customerUIPriceStreamClient struct {
	cc *grpc.ClientConn
}

func NewCustomerUIPriceStreamClient(cc *grpc.ClientConn) CustomerUIPriceStreamClient {
	return &customerUIPriceStreamClient{cc}
}

func (c *customerUIPriceStreamClient) UIPriceAndStateStream(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (CustomerUIPriceStream_UIPriceAndStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CustomerUIPriceStream_serviceDesc.Streams[0], "/customer_ui_stream_api.CustomerUIPriceStream/UIPriceAndStateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerUIPriceStreamUIPriceAndStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerUIPriceStream_UIPriceAndStateStreamClient interface {
	Recv() (*UIPriceAndStateRespons, error)
	grpc.ClientStream
}

type customerUIPriceStreamUIPriceAndStateStreamClient struct {
	grpc.ClientStream
}

func (x *customerUIPriceStreamUIPriceAndStateStreamClient) Recv() (*UIPriceAndStateRespons, error) {
	m := new(UIPriceAndStateRespons)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerUIPriceStreamServer is the server API for CustomerUIPriceStream service.
type CustomerUIPriceStreamServer interface {
	// Returns a stream with
	UIPriceAndStateStream(*EmptyParameter, CustomerUIPriceStream_UIPriceAndStateStreamServer) error
}

func RegisterCustomerUIPriceStreamServer(s *grpc.Server, srv CustomerUIPriceStreamServer) {
	s.RegisterService(&_CustomerUIPriceStream_serviceDesc, srv)
}

func _CustomerUIPriceStream_UIPriceAndStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyParameter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerUIPriceStreamServer).UIPriceAndStateStream(m, &customerUIPriceStreamUIPriceAndStateStreamServer{stream})
}

type CustomerUIPriceStream_UIPriceAndStateStreamServer interface {
	Send(*UIPriceAndStateRespons) error
	grpc.ServerStream
}

type customerUIPriceStreamUIPriceAndStateStreamServer struct {
	grpc.ServerStream
}

func (x *customerUIPriceStreamUIPriceAndStateStreamServer) Send(m *UIPriceAndStateRespons) error {
	return x.ServerStream.SendMsg(m)
}

var _CustomerUIPriceStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer_ui_stream_api.CustomerUIPriceStream",
	HandlerType: (*CustomerUIPriceStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UIPriceAndStateStream",
			Handler:       _CustomerUIPriceStream_UIPriceAndStateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customer_ui_stream_api.proto",
}

func init() {
	proto.RegisterFile("customer_ui_stream_api.proto", fileDescriptor_customer_ui_stream_api_f12ce693d1f7da7a)
}

var fileDescriptor_customer_ui_stream_api_f12ce693d1f7da7a = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0x9b, 0xb6, 0xc9, 0x04, 0xda, 0x64, 0x21, 0x65, 0x29, 0x3d, 0x44, 0x3e, 0x54,
	0x96, 0x10, 0x51, 0x55, 0x24, 0x8e, 0x48, 0x51, 0x45, 0x05, 0x12, 0x48, 0x96, 0x53, 0xce, 0xd6,
	0xe0, 0x0c, 0xaa, 0xb5, 0xb6, 0xd7, 0xda, 0x1d, 0x03, 0x7d, 0x07, 0x9e, 0x8b, 0x07, 0xe0, 0x89,
	0x90, 0x37, 0x81, 0xd8, 0x6e, 0x72, 0xf4, 0xfc, 0xdf, 0xbf, 0xfb, 0xcf, 0x7a, 0x06, 0xce, 0x93,
	0xca, 0xb2, 0xce, 0xc9, 0xc4, 0x55, 0x1a, 0x5b, 0x36, 0x84, 0x79, 0x8c, 0x65, 0x3a, 0x2b, 0x8d,
	0x66, 0x2d, 0x4e, 0xb7, 0xab, 0xfe, 0x08, 0x8e, 0xdf, 0xe7, 0x25, 0xdf, 0x87, 0x68, 0x30, 0x27,
	0x26, 0xe3, 0xff, 0xf1, 0x00, 0xa2, 0xf0, 0xfa, 0x33, 0xf1, 0x9d, 0x5e, 0x5a, 0x11, 0xc0, 0xc9,
	0xdc, 0xaa, 0x5b, 0xfc, 0x99, 0xde, 0x68, 0x13, 0x9a, 0x34, 0x21, 0xe9, 0x4d, 0xbd, 0xa0, 0x1f,
	0x75, 0xcb, 0x62, 0x0a, 0xc3, 0x79, 0x92, 0x50, 0xc9, 0x2b, 0x6a, 0xcf, 0x51, 0xcd, 0x92, 0x78,
	0x05, 0xe3, 0x0f, 0x98, 0x71, 0x88, 0xf7, 0x39, 0x15, 0x6c, 0x63, 0x36, 0x15, 0xc9, 0x7d, 0xc7,
	0x8d, 0x9a, 0xc2, 0xad, 0xa9, 0x48, 0xbc, 0x06, 0xd1, 0x82, 0xbf, 0x61, 0x66, 0x49, 0xf6, 0x1c,
	0xdd, 0x3a, 0xe6, 0xa6, 0x16, 0xc4, 0x39, 0x0c, 0x3e, 0x11, 0x7e, 0xa7, 0x3a, 0x92, 0x3c, 0x70,
	0xd4, 0xa6, 0xe0, 0xff, 0xee, 0xc1, 0xe9, 0x97, 0x8f, 0x2e, 0xc5, 0xbc, 0x58, 0x2e, 0x18, 0x99,
	0x22, 0xb2, 0xa5, 0x2e, 0xac, 0x90, 0x70, 0x84, 0x89, 0x2a, 0x30, 0x51, 0xeb, 0xc6, 0xfe, 0x7d,
	0x8a, 0x33, 0xe8, 0x27, 0x3a, 0x77, 0x77, 0xb8, 0x6e, 0x06, 0xd1, 0xff, 0x6f, 0x71, 0x09, 0xcf,
	0x6c, 0x49, 0xb4, 0x8c, 0x31, 0xd7, 0x55, 0xc1, 0xb1, 0x45, 0xd6, 0xf6, 0x2e, 0x75, 0xdd, 0xec,
	0x47, 0xc2, 0x69, 0x73, 0x27, 0x2d, 0x56, 0x8a, 0x78, 0x07, 0x2f, 0x31, 0x49, 0x28, 0x23, 0x83,
	0x9c, 0xea, 0xa2, 0x6b, 0xec, 0x39, 0xe3, 0x8b, 0x26, 0xd2, 0xf6, 0xcf, 0xe0, 0x29, 0xa7, 0x39,
	0x75, 0x7d, 0x07, 0xce, 0x37, 0xae, 0xa5, 0x36, 0x1f, 0xc0, 0xa8, 0x9d, 0x90, 0x94, 0x3c, 0x9c,
	0x7a, 0xc1, 0x5e, 0x74, 0xdc, 0x4c, 0x47, 0x4a, 0xbc, 0x85, 0xe7, 0x5b, 0x93, 0x91, 0x92, 0x47,
	0xce, 0x30, 0xd9, 0x92, 0x8a, 0x94, 0xb8, 0x80, 0x93, 0x56, 0x22, 0x52, 0xb2, 0xef, 0xf8, 0x27,
	0x8d, 0x34, 0xa4, 0xea, 0xb7, 0x62, 0xcd, 0x98, 0x75, 0xa3, 0x0f, 0x56, 0x6f, 0xe5, 0xb4, 0x07,
	0xd9, 0xdb, 0x0e, 0x52, 0x12, 0x56, 0xd9, 0x9b, 0x34, 0xa9, 0xfa, 0xb7, 0xd7, 0x97, 0x59, 0xc6,
	0xbc, 0x94, 0x43, 0x77, 0xe0, 0xa6, 0x20, 0x42, 0x18, 0x63, 0x96, 0xe9, 0x1f, 0xb4, 0xdc, 0x4c,
	0xb4, 0x7c, 0x3c, 0xf5, 0x82, 0xe1, 0x95, 0x3f, 0xdb, 0xb1, 0x2f, 0x1b, 0x32, 0x7a, 0x68, 0xbe,
	0xfa, 0xe5, 0xc1, 0xe4, 0x7a, 0x6d, 0x5c, 0x0f, 0xd4, 0xc2, 0x79, 0x85, 0x85, 0x49, 0x67, 0xc2,
	0xd6, 0xc2, 0xc5, 0xae, 0x9b, 0xda, 0x8b, 0x77, 0x36, 0xdb, 0xc5, 0x6d, 0x1f, 0x5c, 0xff, 0xd1,
	0xa5, 0xf7, 0xf5, 0xd0, 0x6d, 0xf7, 0x9b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0x4d, 0x08,
	0x38, 0xfd, 0x03, 0x00, 0x00,
}
