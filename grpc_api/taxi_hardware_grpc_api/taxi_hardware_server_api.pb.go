// Code generated by protoc-gen-go. DO NOT EDIT.
// source: taxi_hardware_server_api.proto

package taxi_hardware_grpc_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestOrProdEnviroment int32

const (
	TestOrProdEnviroment_Test       TestOrProdEnviroment = 0
	TestOrProdEnviroment_Production TestOrProdEnviroment = 1
)

var TestOrProdEnviroment_name = map[int32]string{
	0: "Test",
	1: "Production",
}
var TestOrProdEnviroment_value = map[string]int32{
	"Test":       0,
	"Production": 1,
}

func (x TestOrProdEnviroment) String() string {
	return proto.EnumName(TestOrProdEnviroment_name, int32(x))
}
func (TestOrProdEnviroment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f, []int{0}
}

type PowerCutterCommand int32

const (
	PowerCutterCommand_HavePower PowerCutterCommand = 0
	PowerCutterCommand_CutPower  PowerCutterCommand = 1
)

var PowerCutterCommand_name = map[int32]string{
	0: "HavePower",
	1: "CutPower",
}
var PowerCutterCommand_value = map[string]int32{
	"HavePower": 0,
	"CutPower":  1,
}

func (x PowerCutterCommand) String() string {
	return proto.EnumName(PowerCutterCommand_name, int32(x))
}
func (PowerCutterCommand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f, []int{1}
}

// Parameter used for Empty inputs
type EmptyParameter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyParameter) Reset()         { *m = EmptyParameter{} }
func (m *EmptyParameter) String() string { return proto.CompactTextString(m) }
func (*EmptyParameter) ProtoMessage()    {}
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f, []int{0}
}
func (m *EmptyParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyParameter.Unmarshal(m, b)
}
func (m *EmptyParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyParameter.Marshal(b, m, deterministic)
}
func (dst *EmptyParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyParameter.Merge(dst, src)
}
func (m *EmptyParameter) XXX_Size() int {
	return xxx_messageInfo_EmptyParameter.Size(m)
}
func (m *EmptyParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyParameter.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyParameter proto.InternalMessageInfo

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	Acknack              bool     `protobuf:"varint,1,opt,name=acknack,proto3" json:"acknack,omitempty"`
	Comments             string   `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckNackResponse) Reset()         { *m = AckNackResponse{} }
func (m *AckNackResponse) String() string { return proto.CompactTextString(m) }
func (*AckNackResponse) ProtoMessage()    {}
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f, []int{1}
}
func (m *AckNackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckNackResponse.Unmarshal(m, b)
}
func (m *AckNackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckNackResponse.Marshal(b, m, deterministic)
}
func (dst *AckNackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckNackResponse.Merge(dst, src)
}
func (m *AckNackResponse) XXX_Size() int {
	return xxx_messageInfo_AckNackResponse.Size(m)
}
func (m *AckNackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckNackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckNackResponse proto.InternalMessageInfo

func (m *AckNackResponse) GetAcknack() bool {
	if m != nil {
		return m.Acknack
	}
	return false
}

func (m *AckNackResponse) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

type Enviroment struct {
	TestOrProduction     TestOrProdEnviroment `protobuf:"varint,1,opt,name=TestOrProduction,proto3,enum=taxi_hardware_grpc_api.TestOrProdEnviroment" json:"TestOrProduction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Enviroment) Reset()         { *m = Enviroment{} }
func (m *Enviroment) String() string { return proto.CompactTextString(m) }
func (*Enviroment) ProtoMessage()    {}
func (*Enviroment) Descriptor() ([]byte, []int) {
	return fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f, []int{2}
}
func (m *Enviroment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Enviroment.Unmarshal(m, b)
}
func (m *Enviroment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Enviroment.Marshal(b, m, deterministic)
}
func (dst *Enviroment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enviroment.Merge(dst, src)
}
func (m *Enviroment) XXX_Size() int {
	return xxx_messageInfo_Enviroment.Size(m)
}
func (m *Enviroment) XXX_DiscardUnknown() {
	xxx_messageInfo_Enviroment.DiscardUnknown(m)
}

var xxx_messageInfo_Enviroment proto.InternalMessageInfo

func (m *Enviroment) GetTestOrProduction() TestOrProdEnviroment {
	if m != nil {
		return m.TestOrProduction
	}
	return TestOrProdEnviroment_Test
}

type PowerCutterMessage struct {
	TollGateServoEnviroment TestOrProdEnviroment `protobuf:"varint,1,opt,name=tollGateServoEnviroment,proto3,enum=taxi_hardware_grpc_api.TestOrProdEnviroment" json:"tollGateServoEnviroment,omitempty"`
	PowerCutterCommand      PowerCutterCommand   `protobuf:"varint,2,opt,name=powerCutterCommand,proto3,enum=taxi_hardware_grpc_api.PowerCutterCommand" json:"powerCutterCommand,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *PowerCutterMessage) Reset()         { *m = PowerCutterMessage{} }
func (m *PowerCutterMessage) String() string { return proto.CompactTextString(m) }
func (*PowerCutterMessage) ProtoMessage()    {}
func (*PowerCutterMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f, []int{3}
}
func (m *PowerCutterMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PowerCutterMessage.Unmarshal(m, b)
}
func (m *PowerCutterMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PowerCutterMessage.Marshal(b, m, deterministic)
}
func (dst *PowerCutterMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerCutterMessage.Merge(dst, src)
}
func (m *PowerCutterMessage) XXX_Size() int {
	return xxx_messageInfo_PowerCutterMessage.Size(m)
}
func (m *PowerCutterMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerCutterMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PowerCutterMessage proto.InternalMessageInfo

func (m *PowerCutterMessage) GetTollGateServoEnviroment() TestOrProdEnviroment {
	if m != nil {
		return m.TollGateServoEnviroment
	}
	return TestOrProdEnviroment_Test
}

func (m *PowerCutterMessage) GetPowerCutterCommand() PowerCutterCommand {
	if m != nil {
		return m.PowerCutterCommand
	}
	return PowerCutterCommand_HavePower
}

func init() {
	proto.RegisterType((*EmptyParameter)(nil), "taxi_hardware_grpc_api.EmptyParameter")
	proto.RegisterType((*AckNackResponse)(nil), "taxi_hardware_grpc_api.AckNackResponse")
	proto.RegisterType((*Enviroment)(nil), "taxi_hardware_grpc_api.Enviroment")
	proto.RegisterType((*PowerCutterMessage)(nil), "taxi_hardware_grpc_api.PowerCutterMessage")
	proto.RegisterEnum("taxi_hardware_grpc_api.TestOrProdEnviroment", TestOrProdEnviroment_name, TestOrProdEnviroment_value)
	proto.RegisterEnum("taxi_hardware_grpc_api.PowerCutterCommand", PowerCutterCommand_name, PowerCutterCommand_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaxiHardwareClient is the client API for TaxiHardware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaxiHardwareClient interface {
	// Check that the Power Consumption Sensor is working
	CheckPowerSensor(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Check that the Power cutter is working
	CheckPowerCutter(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Cut power due to bo customer or Cusotmer stops paying
	CutPower(ctx context.Context, in *PowerCutterMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type taxiHardwareClient struct {
	cc *grpc.ClientConn
}

func NewTaxiHardwareClient(cc *grpc.ClientConn) TaxiHardwareClient {
	return &taxiHardwareClient{cc}
}

func (c *taxiHardwareClient) CheckPowerSensor(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/taxi_hardware_grpc_api.TaxiHardware/CheckPowerSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxiHardwareClient) CheckPowerCutter(ctx context.Context, in *Enviroment, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/taxi_hardware_grpc_api.TaxiHardware/CheckPowerCutter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxiHardwareClient) CutPower(ctx context.Context, in *PowerCutterMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/taxi_hardware_grpc_api.TaxiHardware/CutPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxiHardwareServer is the server API for TaxiHardware service.
type TaxiHardwareServer interface {
	// Check that the Power Consumption Sensor is working
	CheckPowerSensor(context.Context, *Enviroment) (*AckNackResponse, error)
	// Check that the Power cutter is working
	CheckPowerCutter(context.Context, *Enviroment) (*AckNackResponse, error)
	// Cut power due to bo customer or Cusotmer stops paying
	CutPower(context.Context, *PowerCutterMessage) (*AckNackResponse, error)
}

func RegisterTaxiHardwareServer(s *grpc.Server, srv TaxiHardwareServer) {
	s.RegisterService(&_TaxiHardware_serviceDesc, srv)
}

func _TaxiHardware_CheckPowerSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enviroment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiHardwareServer).CheckPowerSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi_hardware_grpc_api.TaxiHardware/CheckPowerSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiHardwareServer).CheckPowerSensor(ctx, req.(*Enviroment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxiHardware_CheckPowerCutter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enviroment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiHardwareServer).CheckPowerCutter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi_hardware_grpc_api.TaxiHardware/CheckPowerCutter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiHardwareServer).CheckPowerCutter(ctx, req.(*Enviroment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxiHardware_CutPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerCutterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiHardwareServer).CutPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi_hardware_grpc_api.TaxiHardware/CutPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiHardwareServer).CutPower(ctx, req.(*PowerCutterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaxiHardware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taxi_hardware_grpc_api.TaxiHardware",
	HandlerType: (*TaxiHardwareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPowerSensor",
			Handler:    _TaxiHardware_CheckPowerSensor_Handler,
		},
		{
			MethodName: "CheckPowerCutter",
			Handler:    _TaxiHardware_CheckPowerCutter_Handler,
		},
		{
			MethodName: "CutPower",
			Handler:    _TaxiHardware_CutPower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taxi_hardware_server_api.proto",
}

func init() {
	proto.RegisterFile("taxi_hardware_server_api.proto", fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f)
}

var fileDescriptor_taxi_hardware_server_api_13d3005c7485e11f = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x6a, 0xea, 0x50,
	0x10, 0x86, 0x8d, 0x5c, 0xee, 0x8d, 0x83, 0x37, 0x37, 0x1c, 0x2e, 0xad, 0xb8, 0x28, 0x92, 0x4d,
	0x45, 0x8a, 0xb4, 0xf6, 0x09, 0x4a, 0x10, 0xdd, 0xb4, 0x0d, 0xd1, 0x45, 0xe9, 0x46, 0x4e, 0x8f,
	0xa3, 0x86, 0x98, 0x9c, 0x30, 0xe7, 0x18, 0xed, 0x93, 0xf5, 0x55, 0xfa, 0x38, 0xc5, 0x68, 0x0d,
	0x56, 0x03, 0x6d, 0xe9, 0xf2, 0xcf, 0x4c, 0xbe, 0xff, 0x9f, 0xc9, 0x04, 0xce, 0x34, 0x5f, 0x05,
	0xa3, 0x19, 0xa7, 0xf1, 0x92, 0x13, 0x8e, 0x14, 0x52, 0x8a, 0x34, 0xe2, 0x49, 0xd0, 0x4e, 0x48,
	0x6a, 0xc9, 0x4e, 0xf6, 0xeb, 0x53, 0x4a, 0xc4, 0xba, 0xea, 0xd8, 0x60, 0x75, 0xa3, 0x44, 0x3f,
	0x7b, 0x9c, 0x78, 0x84, 0x1a, 0xc9, 0xe9, 0xc1, 0xbf, 0x1b, 0x11, 0xde, 0x71, 0x11, 0xfa, 0xa8,
	0x12, 0x19, 0x2b, 0x64, 0x35, 0xf8, 0xc3, 0x45, 0x18, 0x73, 0x11, 0xd6, 0x8c, 0x86, 0xd1, 0x34,
	0xfd, 0x77, 0xc9, 0xea, 0x60, 0x0a, 0x19, 0x45, 0x18, 0x6b, 0x55, 0x2b, 0x37, 0x8c, 0x66, 0xc5,
	0xdf, 0x69, 0x67, 0x02, 0xd0, 0x8d, 0xd3, 0x80, 0xe4, 0x5a, 0xb2, 0x07, 0xb0, 0x87, 0xa8, 0xf4,
	0x3d, 0x79, 0x24, 0xc7, 0x0b, 0xa1, 0x03, 0x19, 0x67, 0x30, 0xab, 0x73, 0xd1, 0x3e, 0x9e, 0xad,
	0x9d, 0xf7, 0xe7, 0x1c, 0xff, 0x80, 0xe2, 0xbc, 0x1a, 0xc0, 0x3c, 0xb9, 0x44, 0x72, 0x17, 0x5a,
	0x23, 0xdd, 0xa2, 0x52, 0x7c, 0x8a, 0x6c, 0x02, 0xa7, 0x5a, 0xce, 0xe7, 0x3d, 0xae, 0x71, 0x80,
	0x94, 0xca, 0x9c, 0xf1, 0x2d, 0xdf, 0x22, 0x18, 0x7b, 0x04, 0x96, 0xe4, 0xee, 0xae, 0x8c, 0x22,
	0x1e, 0x8f, 0xb3, 0x65, 0x58, 0x9d, 0x56, 0x91, 0x85, 0x77, 0xf0, 0x86, 0x7f, 0x84, 0xd2, 0xba,
	0x84, 0xff, 0xc7, 0xc2, 0x30, 0x13, 0x7e, 0xad, 0x9f, 0xdb, 0x25, 0x66, 0x01, 0xe4, 0xab, 0xb0,
	0x8d, 0xd6, 0xd5, 0xde, 0x2e, 0xb6, 0x1c, 0xf6, 0x17, 0x2a, 0x7d, 0x9e, 0x62, 0x56, 0xb1, 0x4b,
	0xac, 0x0a, 0xa6, 0xbb, 0xd0, 0x1b, 0x65, 0x74, 0x5e, 0xca, 0x50, 0x1d, 0xf2, 0x55, 0xd0, 0xdf,
	0xa6, 0x64, 0x1c, 0x6c, 0x77, 0x86, 0x22, 0xcc, 0x1a, 0x06, 0x18, 0x2b, 0x49, 0xcc, 0x29, 0x9a,
	0x24, 0x4f, 0x55, 0x3f, 0x2f, 0xea, 0xf9, 0x70, 0x4f, 0x4e, 0x69, 0xdf, 0x62, 0x93, 0xf5, 0xe7,
	0x2d, 0x76, 0x43, 0xb2, 0xcf, 0x7c, 0x87, 0xed, 0xdd, 0x7c, 0xc1, 0xe2, 0xe9, 0x77, 0xf6, 0x6f,
	0x5d, 0xbf, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xb4, 0x16, 0x93, 0x7d, 0x03, 0x00, 0x00,
}
