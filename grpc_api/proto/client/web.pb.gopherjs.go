// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: customer_gui/proto/web.proto

/*
	Package client is a generated protocol buffer package.

	Web exposes a backend server over gRPC.

	It is generated from these files:
		customer_gui/proto/web.proto

	It has these top-level messages:
		EmptyParameter
		SaveMessageRespons
		SaveMessageRequest
		LoadMessageRequest
		LoadMessageResponse
		DBObject
		ListOfObjects
		ListOfObjectsRespons
*/
package client

import jspb "github.com/johanbrandhorst/protobuf/jspb"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// Parameter used for Empty inputs
type EmptyParameter struct {
}

// MarshalToWriter marshals EmptyParameter to the provided writer.
func (m *EmptyParameter) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	return
}

// Marshal marshals EmptyParameter to a slice of bytes.
func (m *EmptyParameter) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a EmptyParameter from the provided reader.
func (m *EmptyParameter) UnmarshalFromReader(reader jspb.Reader) *EmptyParameter {
	for reader.Next() {
		if m == nil {
			m = &EmptyParameter{}
		}

		switch reader.GetFieldNumber() {
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a EmptyParameter from a slice of bytes.
func (m *EmptyParameter) Unmarshal(rawBytes []byte) (*EmptyParameter, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type SaveMessageRespons struct {
	Acknack  bool
	Comments string
}

// GetAcknack gets the Acknack of the SaveMessageRespons.
func (m *SaveMessageRespons) GetAcknack() (x bool) {
	if m == nil {
		return x
	}
	return m.Acknack
}

// GetComments gets the Comments of the SaveMessageRespons.
func (m *SaveMessageRespons) GetComments() (x string) {
	if m == nil {
		return x
	}
	return m.Comments
}

// MarshalToWriter marshals SaveMessageRespons to the provided writer.
func (m *SaveMessageRespons) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Acknack {
		writer.WriteBool(1, m.Acknack)
	}

	if len(m.Comments) > 0 {
		writer.WriteString(2, m.Comments)
	}

	return
}

// Marshal marshals SaveMessageRespons to a slice of bytes.
func (m *SaveMessageRespons) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a SaveMessageRespons from the provided reader.
func (m *SaveMessageRespons) UnmarshalFromReader(reader jspb.Reader) *SaveMessageRespons {
	for reader.Next() {
		if m == nil {
			m = &SaveMessageRespons{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Acknack = reader.ReadBool()
		case 2:
			m.Comments = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a SaveMessageRespons from a slice of bytes.
func (m *SaveMessageRespons) Unmarshal(rawBytes []byte) (*SaveMessageRespons, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type SaveMessageRequest struct {
	ObjectToSave *DBObject
}

// GetObjectToSave gets the ObjectToSave of the SaveMessageRequest.
func (m *SaveMessageRequest) GetObjectToSave() (x *DBObject) {
	if m == nil {
		return x
	}
	return m.ObjectToSave
}

// MarshalToWriter marshals SaveMessageRequest to the provided writer.
func (m *SaveMessageRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.ObjectToSave != nil {
		writer.WriteMessage(1, func() {
			m.ObjectToSave.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals SaveMessageRequest to a slice of bytes.
func (m *SaveMessageRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a SaveMessageRequest from the provided reader.
func (m *SaveMessageRequest) UnmarshalFromReader(reader jspb.Reader) *SaveMessageRequest {
	for reader.Next() {
		if m == nil {
			m = &SaveMessageRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.ObjectToSave = m.ObjectToSave.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a SaveMessageRequest from a slice of bytes.
func (m *SaveMessageRequest) Unmarshal(rawBytes []byte) (*SaveMessageRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type LoadMessageRequest struct {
	Key string
}

// GetKey gets the Key of the LoadMessageRequest.
func (m *LoadMessageRequest) GetKey() (x string) {
	if m == nil {
		return x
	}
	return m.Key
}

// MarshalToWriter marshals LoadMessageRequest to the provided writer.
func (m *LoadMessageRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Key) > 0 {
		writer.WriteString(1, m.Key)
	}

	return
}

// Marshal marshals LoadMessageRequest to a slice of bytes.
func (m *LoadMessageRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a LoadMessageRequest from the provided reader.
func (m *LoadMessageRequest) UnmarshalFromReader(reader jspb.Reader) *LoadMessageRequest {
	for reader.Next() {
		if m == nil {
			m = &LoadMessageRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Key = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a LoadMessageRequest from a slice of bytes.
func (m *LoadMessageRequest) Unmarshal(rawBytes []byte) (*LoadMessageRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type LoadMessageResponse struct {
	Acknack  bool
	Comments string
	Key      string
	Jsondata string
}

// GetAcknack gets the Acknack of the LoadMessageResponse.
func (m *LoadMessageResponse) GetAcknack() (x bool) {
	if m == nil {
		return x
	}
	return m.Acknack
}

// GetComments gets the Comments of the LoadMessageResponse.
func (m *LoadMessageResponse) GetComments() (x string) {
	if m == nil {
		return x
	}
	return m.Comments
}

// GetKey gets the Key of the LoadMessageResponse.
func (m *LoadMessageResponse) GetKey() (x string) {
	if m == nil {
		return x
	}
	return m.Key
}

// GetJsondata gets the Jsondata of the LoadMessageResponse.
func (m *LoadMessageResponse) GetJsondata() (x string) {
	if m == nil {
		return x
	}
	return m.Jsondata
}

// MarshalToWriter marshals LoadMessageResponse to the provided writer.
func (m *LoadMessageResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Acknack {
		writer.WriteBool(1, m.Acknack)
	}

	if len(m.Comments) > 0 {
		writer.WriteString(2, m.Comments)
	}

	if len(m.Key) > 0 {
		writer.WriteString(3, m.Key)
	}

	if len(m.Jsondata) > 0 {
		writer.WriteString(4, m.Jsondata)
	}

	return
}

// Marshal marshals LoadMessageResponse to a slice of bytes.
func (m *LoadMessageResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a LoadMessageResponse from the provided reader.
func (m *LoadMessageResponse) UnmarshalFromReader(reader jspb.Reader) *LoadMessageResponse {
	for reader.Next() {
		if m == nil {
			m = &LoadMessageResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Acknack = reader.ReadBool()
		case 2:
			m.Comments = reader.ReadString()
		case 3:
			m.Key = reader.ReadString()
		case 4:
			m.Jsondata = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a LoadMessageResponse from a slice of bytes.
func (m *LoadMessageResponse) Unmarshal(rawBytes []byte) (*LoadMessageResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type DBObject struct {
	Key      string
	Jsondata string
}

// GetKey gets the Key of the DBObject.
func (m *DBObject) GetKey() (x string) {
	if m == nil {
		return x
	}
	return m.Key
}

// GetJsondata gets the Jsondata of the DBObject.
func (m *DBObject) GetJsondata() (x string) {
	if m == nil {
		return x
	}
	return m.Jsondata
}

// MarshalToWriter marshals DBObject to the provided writer.
func (m *DBObject) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Key) > 0 {
		writer.WriteString(1, m.Key)
	}

	if len(m.Jsondata) > 0 {
		writer.WriteString(4, m.Jsondata)
	}

	return
}

// Marshal marshals DBObject to a slice of bytes.
func (m *DBObject) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a DBObject from the provided reader.
func (m *DBObject) UnmarshalFromReader(reader jspb.Reader) *DBObject {
	for reader.Next() {
		if m == nil {
			m = &DBObject{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Key = reader.ReadString()
		case 4:
			m.Jsondata = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a DBObject from a slice of bytes.
func (m *DBObject) Unmarshal(rawBytes []byte) (*DBObject, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type ListOfObjects struct {
	Key      string
	Jsondata string
}

// GetKey gets the Key of the ListOfObjects.
func (m *ListOfObjects) GetKey() (x string) {
	if m == nil {
		return x
	}
	return m.Key
}

// GetJsondata gets the Jsondata of the ListOfObjects.
func (m *ListOfObjects) GetJsondata() (x string) {
	if m == nil {
		return x
	}
	return m.Jsondata
}

// MarshalToWriter marshals ListOfObjects to the provided writer.
func (m *ListOfObjects) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Key) > 0 {
		writer.WriteString(1, m.Key)
	}

	if len(m.Jsondata) > 0 {
		writer.WriteString(4, m.Jsondata)
	}

	return
}

// Marshal marshals ListOfObjects to a slice of bytes.
func (m *ListOfObjects) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ListOfObjects from the provided reader.
func (m *ListOfObjects) UnmarshalFromReader(reader jspb.Reader) *ListOfObjects {
	for reader.Next() {
		if m == nil {
			m = &ListOfObjects{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Key = reader.ReadString()
		case 4:
			m.Jsondata = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ListOfObjects from a slice of bytes.
func (m *ListOfObjects) Unmarshal(rawBytes []byte) (*ListOfObjects, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type ListOfObjectsRespons struct {
	Acknack         bool
	Comments        string
	ListOfDBObjects []*DBObject
}

// GetAcknack gets the Acknack of the ListOfObjectsRespons.
func (m *ListOfObjectsRespons) GetAcknack() (x bool) {
	if m == nil {
		return x
	}
	return m.Acknack
}

// GetComments gets the Comments of the ListOfObjectsRespons.
func (m *ListOfObjectsRespons) GetComments() (x string) {
	if m == nil {
		return x
	}
	return m.Comments
}

// GetListOfDBObjects gets the ListOfDBObjects of the ListOfObjectsRespons.
func (m *ListOfObjectsRespons) GetListOfDBObjects() (x []*DBObject) {
	if m == nil {
		return x
	}
	return m.ListOfDBObjects
}

// MarshalToWriter marshals ListOfObjectsRespons to the provided writer.
func (m *ListOfObjectsRespons) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Acknack {
		writer.WriteBool(1, m.Acknack)
	}

	if len(m.Comments) > 0 {
		writer.WriteString(2, m.Comments)
	}

	for _, msg := range m.ListOfDBObjects {
		writer.WriteMessage(3, func() {
			msg.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals ListOfObjectsRespons to a slice of bytes.
func (m *ListOfObjectsRespons) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ListOfObjectsRespons from the provided reader.
func (m *ListOfObjectsRespons) UnmarshalFromReader(reader jspb.Reader) *ListOfObjectsRespons {
	for reader.Next() {
		if m == nil {
			m = &ListOfObjectsRespons{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Acknack = reader.ReadBool()
		case 2:
			m.Comments = reader.ReadString()
		case 3:
			reader.ReadMessage(func() {
				m.ListOfDBObjects = append(m.ListOfDBObjects, new(DBObject).UnmarshalFromReader(reader))
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ListOfObjectsRespons from a slice of bytes.
func (m *ListOfObjectsRespons) Unmarshal(rawBytes []byte) (*ListOfObjectsRespons, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion3

// Client API for CustomerUIMethods service

// The Client register service definition.
// ***********************
type CustomerUIMethodsClient interface {
	// Ask taxi for Price
	SaveToDB(ctx context.Context, in *SaveMessageRequest, opts ...grpcweb.CallOption) (*SaveMessageRespons, error)
	// Accept price from Taxi
	LoadFromDB(ctx context.Context, in *LoadMessageRequest, opts ...grpcweb.CallOption) (*LoadMessageResponse, error)
	// Halt payment of incoming paymentRequests
	ListAllObjectsInDB(ctx context.Context, in *EmptyParameter, opts ...grpcweb.CallOption) (*ListOfObjectsRespons, error)
}

type customerUIMethodsClient struct {
	client *grpcweb.Client
}

// NewCustomerUIMethodsClient creates a new gRPC-Web client.
func NewCustomerUIMethodsClient(hostname string, opts ...grpcweb.DialOption) CustomerUIMethodsClient {
	return &customerUIMethodsClient{
		client: grpcweb.NewClient(hostname, "web.CustomerUIMethods", opts...),
	}
}

func (c *customerUIMethodsClient) SaveToDB(ctx context.Context, in *SaveMessageRequest, opts ...grpcweb.CallOption) (*SaveMessageRespons, error) {
	resp, err := c.client.RPCCall(ctx, "SaveToDB", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(SaveMessageRespons).Unmarshal(resp)
}

func (c *customerUIMethodsClient) LoadFromDB(ctx context.Context, in *LoadMessageRequest, opts ...grpcweb.CallOption) (*LoadMessageResponse, error) {
	resp, err := c.client.RPCCall(ctx, "LoadFromDB", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(LoadMessageResponse).Unmarshal(resp)
}

func (c *customerUIMethodsClient) ListAllObjectsInDB(ctx context.Context, in *EmptyParameter, opts ...grpcweb.CallOption) (*ListOfObjectsRespons, error) {
	resp, err := c.client.RPCCall(ctx, "ListAllObjectsInDB", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(ListOfObjectsRespons).Unmarshal(resp)
}
