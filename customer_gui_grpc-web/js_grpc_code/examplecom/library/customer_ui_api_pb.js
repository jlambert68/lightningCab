/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.customer_ui_api.AckNackResponse', null, global);
goog.exportSymbol('proto.customer_ui_api.EmptyParameter', null, global);
goog.exportSymbol('proto.customer_ui_api.HaltPaymentRequest', null, global);
goog.exportSymbol('proto.customer_ui_api.PriceUnit', null, global);
goog.exportSymbol('proto.customer_ui_api.Price_UI', null, global);
goog.exportSymbol('proto.customer_ui_api.RPCMethods', null, global);
goog.exportSymbol('proto.customer_ui_api.TimeUnit', null, global);
goog.exportSymbol('proto.customer_ui_api.UIPriceAndStateRespons', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.customer_ui_api.EmptyParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.customer_ui_api.EmptyParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.customer_ui_api.EmptyParameter.displayName = 'proto.customer_ui_api.EmptyParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.customer_ui_api.AckNackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.customer_ui_api.AckNackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.customer_ui_api.AckNackResponse.displayName = 'proto.customer_ui_api.AckNackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.customer_ui_api.HaltPaymentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.customer_ui_api.HaltPaymentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.customer_ui_api.HaltPaymentRequest.displayName = 'proto.customer_ui_api.HaltPaymentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.customer_ui_api.Price_UI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.customer_ui_api.Price_UI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.customer_ui_api.Price_UI.displayName = 'proto.customer_ui_api.Price_UI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.customer_ui_api.RPCMethods = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.customer_ui_api.RPCMethods, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.customer_ui_api.RPCMethods.displayName = 'proto.customer_ui_api.RPCMethods';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.customer_ui_api.UIPriceAndStateRespons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.customer_ui_api.UIPriceAndStateRespons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.customer_ui_api.UIPriceAndStateRespons.displayName = 'proto.customer_ui_api.UIPriceAndStateRespons';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.customer_ui_api.EmptyParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.customer_ui_api.EmptyParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.customer_ui_api.EmptyParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.EmptyParameter.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.customer_ui_api.EmptyParameter}
 */
proto.customer_ui_api.EmptyParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.customer_ui_api.EmptyParameter;
  return proto.customer_ui_api.EmptyParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.customer_ui_api.EmptyParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.customer_ui_api.EmptyParameter}
 */
proto.customer_ui_api.EmptyParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.customer_ui_api.EmptyParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.customer_ui_api.EmptyParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.customer_ui_api.EmptyParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.EmptyParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.customer_ui_api.AckNackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.customer_ui_api.AckNackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.customer_ui_api.AckNackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.AckNackResponse.toObject = function(includeInstance, msg) {
  var obj = {
    acknack: jspb.Message.getFieldWithDefault(msg, 1, false),
    comments: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.customer_ui_api.AckNackResponse}
 */
proto.customer_ui_api.AckNackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.customer_ui_api.AckNackResponse;
  return proto.customer_ui_api.AckNackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.customer_ui_api.AckNackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.customer_ui_api.AckNackResponse}
 */
proto.customer_ui_api.AckNackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknack(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.customer_ui_api.AckNackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.customer_ui_api.AckNackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.customer_ui_api.AckNackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.AckNackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcknack();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getComments();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool acknack = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.AckNackResponse.prototype.getAcknack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.customer_ui_api.AckNackResponse.prototype.setAcknack = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string comments = 2;
 * @return {string}
 */
proto.customer_ui_api.AckNackResponse.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.customer_ui_api.AckNackResponse.prototype.setComments = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.customer_ui_api.HaltPaymentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.customer_ui_api.HaltPaymentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.customer_ui_api.HaltPaymentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.HaltPaymentRequest.toObject = function(includeInstance, msg) {
  var obj = {
    haltpayment: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.customer_ui_api.HaltPaymentRequest}
 */
proto.customer_ui_api.HaltPaymentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.customer_ui_api.HaltPaymentRequest;
  return proto.customer_ui_api.HaltPaymentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.customer_ui_api.HaltPaymentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.customer_ui_api.HaltPaymentRequest}
 */
proto.customer_ui_api.HaltPaymentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaltpayment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.customer_ui_api.HaltPaymentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.customer_ui_api.HaltPaymentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.customer_ui_api.HaltPaymentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.HaltPaymentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHaltpayment();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool haltpayment = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.HaltPaymentRequest.prototype.getHaltpayment = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.customer_ui_api.HaltPaymentRequest.prototype.setHaltpayment = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.customer_ui_api.Price_UI.prototype.toObject = function(opt_includeInstance) {
  return proto.customer_ui_api.Price_UI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.customer_ui_api.Price_UI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.Price_UI.toObject = function(includeInstance, msg) {
  var obj = {
    acknack: jspb.Message.getFieldWithDefault(msg, 1, false),
    comments: jspb.Message.getFieldWithDefault(msg, 2, ""),
    speedAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accelerationAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 5, 0),
    speedAmountSek: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    accelerationAmountSek: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    timeAmountSek: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    timeunit: jspb.Message.getFieldWithDefault(msg, 9, 0),
    paymentrequestinterval: jspb.Message.getFieldWithDefault(msg, 10, 0),
    priceunit: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.customer_ui_api.Price_UI}
 */
proto.customer_ui_api.Price_UI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.customer_ui_api.Price_UI;
  return proto.customer_ui_api.Price_UI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.customer_ui_api.Price_UI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.customer_ui_api.Price_UI}
 */
proto.customer_ui_api.Price_UI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknack(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSpeedAmountSatoshi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccelerationAmountSatoshi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeAmountSatoshi(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedAmountSek(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAccelerationAmountSek(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeAmountSek(value);
      break;
    case 9:
      var value = /** @type {!proto.customer_ui_api.TimeUnit} */ (reader.readEnum());
      msg.setTimeunit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaymentrequestinterval(value);
      break;
    case 11:
      var value = /** @type {!proto.customer_ui_api.PriceUnit} */ (reader.readEnum());
      msg.setPriceunit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.customer_ui_api.Price_UI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.customer_ui_api.Price_UI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.customer_ui_api.Price_UI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.Price_UI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcknack();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getComments();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpeedAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAccelerationAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTimeAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getSpeedAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getAccelerationAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getTimeAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getTimeunit();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getPaymentrequestinterval();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPriceunit();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional bool acknack = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.Price_UI.prototype.getAcknack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.customer_ui_api.Price_UI.prototype.setAcknack = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string comments = 2;
 * @return {string}
 */
proto.customer_ui_api.Price_UI.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.customer_ui_api.Price_UI.prototype.setComments = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 speed_amount_satoshi = 3;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getSpeedAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setSpeedAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 acceleration_amount_satoshi = 4;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getAccelerationAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setAccelerationAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 time_amount_satoshi = 5;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getTimeAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setTimeAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float speed_amount_sek = 6;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getSpeedAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setSpeedAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float acceleration_amount_sek = 7;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getAccelerationAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setAccelerationAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float time_amount_sek = 8;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getTimeAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setTimeAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional TimeUnit timeunit = 9;
 * @return {!proto.customer_ui_api.TimeUnit}
 */
proto.customer_ui_api.Price_UI.prototype.getTimeunit = function() {
  return /** @type {!proto.customer_ui_api.TimeUnit} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.customer_ui_api.TimeUnit} value */
proto.customer_ui_api.Price_UI.prototype.setTimeunit = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional int32 paymentRequestInterval = 10;
 * @return {number}
 */
proto.customer_ui_api.Price_UI.prototype.getPaymentrequestinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.customer_ui_api.Price_UI.prototype.setPaymentrequestinterval = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional PriceUnit priceunit = 11;
 * @return {!proto.customer_ui_api.PriceUnit}
 */
proto.customer_ui_api.Price_UI.prototype.getPriceunit = function() {
  return /** @type {!proto.customer_ui_api.PriceUnit} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.customer_ui_api.PriceUnit} value */
proto.customer_ui_api.Price_UI.prototype.setPriceunit = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.customer_ui_api.RPCMethods.prototype.toObject = function(opt_includeInstance) {
  return proto.customer_ui_api.RPCMethods.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.customer_ui_api.RPCMethods} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.RPCMethods.toObject = function(includeInstance, msg) {
  var obj = {
    asktaxiforprice: jspb.Message.getFieldWithDefault(msg, 1, false),
    acceptprice: jspb.Message.getFieldWithDefault(msg, 2, false),
    haltpaymentsTrue: jspb.Message.getFieldWithDefault(msg, 3, false),
    haltpaymentsFalse: jspb.Message.getFieldWithDefault(msg, 4, false),
    leavetaxi: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.customer_ui_api.RPCMethods}
 */
proto.customer_ui_api.RPCMethods.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.customer_ui_api.RPCMethods;
  return proto.customer_ui_api.RPCMethods.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.customer_ui_api.RPCMethods} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.customer_ui_api.RPCMethods}
 */
proto.customer_ui_api.RPCMethods.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsktaxiforprice(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcceptprice(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaltpaymentsTrue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaltpaymentsFalse(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeavetaxi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.customer_ui_api.RPCMethods.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.customer_ui_api.RPCMethods.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.customer_ui_api.RPCMethods} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.RPCMethods.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsktaxiforprice();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAcceptprice();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHaltpaymentsTrue();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHaltpaymentsFalse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLeavetaxi();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool AskTaxiForPrice = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.RPCMethods.prototype.getAsktaxiforprice = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.customer_ui_api.RPCMethods.prototype.setAsktaxiforprice = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool AcceptPrice = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.RPCMethods.prototype.getAcceptprice = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.customer_ui_api.RPCMethods.prototype.setAcceptprice = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool HaltPayments_true = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.RPCMethods.prototype.getHaltpaymentsTrue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.customer_ui_api.RPCMethods.prototype.setHaltpaymentsTrue = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool HaltPayments_false = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.RPCMethods.prototype.getHaltpaymentsFalse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.customer_ui_api.RPCMethods.prototype.setHaltpaymentsFalse = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool LeaveTaxi = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.RPCMethods.prototype.getLeavetaxi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.customer_ui_api.RPCMethods.prototype.setLeavetaxi = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.toObject = function(opt_includeInstance) {
  return proto.customer_ui_api.UIPriceAndStateRespons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.customer_ui_api.UIPriceAndStateRespons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.UIPriceAndStateRespons.toObject = function(includeInstance, msg) {
  var obj = {
    acknack: jspb.Message.getFieldWithDefault(msg, 1, false),
    comments: jspb.Message.getFieldWithDefault(msg, 2, ""),
    speedAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accelerationAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 5, 0),
    speedAmountSek: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    accelerationAmountSek: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    timeAmountSek: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    totalAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 9, 0),
    totalAmountSek: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    allowedrpcmethods: (f = msg.getAllowedrpcmethods()) && proto.customer_ui_api.RPCMethods.toObject(includeInstance, f),
    currentTaxirideSatoshi: jspb.Message.getFieldWithDefault(msg, 13, 0),
    currentTaxiRideSek: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    currentWalletbalanceSatoshi: jspb.Message.getFieldWithDefault(msg, 15, 0),
    currentWalletbalanceSek: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    averagePaymentAmountSatoshi: jspb.Message.getFieldWithDefault(msg, 17, 0),
    averagePaymentAmountSek: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    avaregeNumberOfPayments: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    accelarationPercent: jspb.Message.getFieldWithDefault(msg, 20, 0),
    speedPercent: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.customer_ui_api.UIPriceAndStateRespons}
 */
proto.customer_ui_api.UIPriceAndStateRespons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.customer_ui_api.UIPriceAndStateRespons;
  return proto.customer_ui_api.UIPriceAndStateRespons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.customer_ui_api.UIPriceAndStateRespons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.customer_ui_api.UIPriceAndStateRespons}
 */
proto.customer_ui_api.UIPriceAndStateRespons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknack(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSpeedAmountSatoshi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccelerationAmountSatoshi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeAmountSatoshi(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedAmountSek(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAccelerationAmountSek(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeAmountSek(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalAmountSatoshi(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalAmountSek(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 12:
      var value = new proto.customer_ui_api.RPCMethods;
      reader.readMessage(value,proto.customer_ui_api.RPCMethods.deserializeBinaryFromReader);
      msg.setAllowedrpcmethods(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentTaxirideSatoshi(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentTaxiRideSek(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentWalletbalanceSatoshi(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentWalletbalanceSek(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAveragePaymentAmountSatoshi(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAveragePaymentAmountSek(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvaregeNumberOfPayments(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccelarationPercent(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeedPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.customer_ui_api.UIPriceAndStateRespons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.customer_ui_api.UIPriceAndStateRespons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.customer_ui_api.UIPriceAndStateRespons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcknack();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getComments();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpeedAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAccelerationAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTimeAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getSpeedAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getAccelerationAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getTimeAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getTotalAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTotalAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getAllowedrpcmethods();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.customer_ui_api.RPCMethods.serializeBinaryToWriter
    );
  }
  f = message.getCurrentTaxirideSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getCurrentTaxiRideSek();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getCurrentWalletbalanceSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getCurrentWalletbalanceSek();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getAveragePaymentAmountSatoshi();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getAveragePaymentAmountSek();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getAvaregeNumberOfPayments();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = message.getAccelarationPercent();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getSpeedPercent();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
};


/**
 * optional bool acknack = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAcknack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAcknack = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string comments = 2;
 * @return {string}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setComments = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 speed_amount_satoshi = 3;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getSpeedAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setSpeedAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 acceleration_amount_satoshi = 4;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAccelerationAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAccelerationAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 time_amount_satoshi = 5;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getTimeAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setTimeAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float speed_amount_sek = 6;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getSpeedAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setSpeedAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float acceleration_amount_sek = 7;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAccelerationAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAccelerationAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float time_amount_sek = 8;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getTimeAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setTimeAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional int64 total_amount_satoshi = 9;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getTotalAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setTotalAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float total_amount_sek = 10;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getTotalAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setTotalAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional int64 timestamp = 11;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional RPCMethods allowedRPCMethods = 12;
 * @return {?proto.customer_ui_api.RPCMethods}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAllowedrpcmethods = function() {
  return /** @type{?proto.customer_ui_api.RPCMethods} */ (
    jspb.Message.getWrapperField(this, proto.customer_ui_api.RPCMethods, 12));
};


/** @param {?proto.customer_ui_api.RPCMethods|undefined} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAllowedrpcmethods = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.clearAllowedrpcmethods = function() {
  this.setAllowedrpcmethods(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.hasAllowedrpcmethods = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int64 current_taxiride_satoshi = 13;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getCurrentTaxirideSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setCurrentTaxirideSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional float current_taxi_ride_sek = 14;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getCurrentTaxiRideSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setCurrentTaxiRideSek = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional int64 current_walletbalance_satoshi = 15;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getCurrentWalletbalanceSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setCurrentWalletbalanceSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional float current_walletbalance_sek = 16;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getCurrentWalletbalanceSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setCurrentWalletbalanceSek = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional int64 average_payment_amount_satoshi = 17;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAveragePaymentAmountSatoshi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAveragePaymentAmountSatoshi = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional float average_payment_amount_sek = 18;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAveragePaymentAmountSek = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAveragePaymentAmountSek = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional float avarege_number_of_payments = 19;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAvaregeNumberOfPayments = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAvaregeNumberOfPayments = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional int32 accelaration_percent = 20;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getAccelarationPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setAccelarationPercent = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 speed_percent = 21;
 * @return {number}
 */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.getSpeedPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.customer_ui_api.UIPriceAndStateRespons.prototype.setSpeedPercent = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * @enum {number}
 */
proto.customer_ui_api.PriceUnit = {
  SATOSHIPERSECOND: 0
};

/**
 * @enum {number}
 */
proto.customer_ui_api.TimeUnit = {
  SECONDSBETWEENPAYMENTMENTREQUESTS: 0,
  MILLISECONDSBETWEENPAYMENTMENTREQUESTS: 1
};

goog.object.extend(exports, proto.customer_ui_api);
